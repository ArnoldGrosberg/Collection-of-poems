{
  "openapi": "3.0.2",
  "info": {
    "title": "Collection of poems",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:4000/",
      "description": ""
    }
  ],
  "paths": {
    "/poems": {
      "summary": "Path used to manage the list of poems.",
      "description": "The REST endpoint/path used to list and create zero or more `poem` entities.  This path contains a `GET` operation to perform the list, respectively.",
      "get": {
        "tags": [
          "/poems"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/poem"
                  }
                }
              }
            },
            "description": "Successful response - returns an array of `poem` entities."
          }
        },
        "operationId": "getPoems",
        "summary": "List all poems",
        "description": "Gets a list of all `poem` entities."
      }
    },
    "/sessions": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sessionRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "/sessions"
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sessionResponse"
                }
              }
            },
            "description": "Successful login"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sessionResponse"
                }
              }
            },
            "description": "One or all params are missing"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sessionResponse"
                }
              }
            },
            "description": "Unauthorized: username or password is incorrect"
          }
        },
        "summary": "Login"
      },
      "delete": {
        "tags": [
          "/sessions"
        ],
        "responses": {
          "204": {
            "description": "Successful response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Invalid Authorization header format": {
                    "value": {
                      "error": "Invalid Authorization header format"
                    }
                  }
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Invalid token": {
                    "value": {
                      "error": "Invalid token"
                    }
                  },
                  "You have to login": {
                    "value": {
                      "error": "You have to login"
                    }
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "SessionId does not have an user associated with it": {
                    "value": {
                      "error": "SessionId does not have an user associated with it"
                    }
                  }
                }
              }
            },
            "description": "Session not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Logout"
      }
    },
    "/users": {
      "summary": "Path used to create a single user.",
      "description": "The REST endpoint/path used to create zero or more `user` entities.  This path contains a `POST` operation to perform the creation task, respectively.",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sessionRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "/users"
        ],
        "responses": {
          "201": {
            "description": "User created - returns a `sessionId` for the user."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "One or all params are missing": {
                    "value": {
                      "error": "One or all params are missing"
                    }
                  }
                }
              }
            },
            "description": "Bad request"
          },
          "409": {
            "description": "The user already exists. "
          }
        },
        "operationId": "createUser",
        "summary": "Creates a user",
        "description": "Creates a user."
      }
    },
    "/": {
      "get": {
        "tags": [
          "/"
        ],
        "responses": {
          "200": {
            "content": {
              "text/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response - returns html of the frontend."
          }
        },
        "operationId": "getFrontend",
        "summary": "Display the frontend",
        "description": "Displays the frontend\n"
      }
    }
  },
  "components": {
    "schemas": {
      "poem": {
        "title": "Root Type for poem",
        "description": "",
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "likeCount": {
            "format": "int32",
            "type": "string"
          },
          "entryDate": {
            "format": "date",
            "type": "string"
          },
          "addedBy": {
            "type": "string"
          }
        },
        "example": {
          "id": 1,
          "title": "The Raven",
          "content": "Once upon a midnight dreary, while I pondered, weak and weary, Over many a quaint and curious volume of forgotten lore, While I nodded, nearly napping, suddenly there came a tapping, As of some one gently rapping, rapping at my chamber door.“’Tis some visitor,” I muttered, “tapping at my chamber door — Only this and nothing more.”",
          "likeCount": 60,
          "entryDate": "2018-12-04",
          "addedBy": "Edgar Allan Poe"
        }
      },
      "sessionRequest": {
        "title": "Root Type for sessionRequest",
        "description": "",
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "username": "Admin",
          "password": "Password"
        }
      },
      "sessionResponse": {
        "title": "Root Type for sessionResponse",
        "description": "",
        "required": [
          "sessionId"
        ],
        "type": "object",
        "properties": {
          "sessionId": {
            "format": "int32",
            "description": "",
            "type": "integer"
          }
        },
        "example": {
          "sessionId": 3
        }
      },
      "error": {
        "title": "Root Type for error",
        "description": "",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "example": {
          "error": "string"
        }
      },
      "error401": {
        "title": "Root Type for error",
        "description": "",
        "type": "object",
        "properties": {
          "error": {
            "description": "You have to login",
            "type": "string",
            "example": "{\r\n  \"error\": \"You have to login\"\r\n}"
          }
        },
        "example": {
          "error": "You have to login"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}